body {
  background-color: rgb(96, 244, 244);
  text-align: center;
  font-size: 1em;
  font-family: verdana;
  margin: 0;
}
h1 {
  background-color: rgb(235, 205, 255);
  font-size: 2em;
  padding: 20px 0;
  border-bottom: 1px solid #eee;
  margin: 0 0 30px 0;
  color: #333;
}

/* ROWS */
.row {
  text-align: center;
  display: flex;
  justify-content: center;
}

/* each div inside the row */
.row > div {
  background-color: whitesmoke;
  display: block;
  width: 60px;
  height: 60px;
  border: 1px solid #bbb;
  margin: 4px;
  text-align: center;
  line-height: 60px;
  text-transform: uppercase;
  font-weight: bold;
  font-size: 2.5em;
}
/* any div with a class of 'green' inside a row */
.row > div.green {
  /* adding '--' in front of the property makes it a variable, so it can be used elsewhere */
  --background: #5ac85a;
  --border-color: #5ac85a;
  animation: flip 0.5s ease forwards;
}
/* any div with a class of 'grey' inside a row */
.row > div.grey {
  --background: #a1a1a1;
  --border-color: #a1a1a1;
  animation: flip 0.5s ease forwards;
}
/* any div with a class of 'yellow' inside a row */
.row > div.yellow {
  --background: #e2cc68;
  --border-color: #e2cc68;
  animation: flip 0.5s ease forwards;
}
/* first div has no delay, it begins animating immediately. */

/* get div inside the row which is the nth-child(2) or the 2nd div */
.row > div:nth-child(2) {
  animation-delay: 0.2s;
}
/* get div inside the row which is the nth-child(3) or the 3rd div */
.row > div:nth-child(3) {
  animation-delay: 0.4s;
}
/* get div inside the row which is the nth-child(4) or the 4th div */
.row > div:nth-child(4) {
  animation-delay: 0.6s;
}
/* get div inside the row which is the nth-child(5) or the 5th div */
.row > div:nth-child(5) {
  animation-delay: 0.8s;
}

.row.current > div.filled {
  /* take 0.2 sec to 'bounce' and remain at the final stage of the animation(forwards). */
  animation: bounce 0.2s ease-in-out forwards;
}

.keypad {
  max-width: 500px;
  /* 20px top and bottom, auto left & right. */
  margin: 20px auto;
  /* max-width and margin set this way are centralizing the keypad at the bottom of the screen. */
}

/* each key is a 'div' inside the 'keypad' component */
.keypad > div {
  margin: 5px;
  min-width: 40px;
  max-width: 70px;
  height: 50px;
  background: rgb(235, 205, 255);
  /* all sit next to each other until reaching the 500px max-width, then start on next line */
  display: inline-block;
  /* rounded corners */
  border-radius: 6px;
  /* text will sit vertically in the middle */
  line-height: 50px;
}
.keypad > div.green {
  background: #5ac85a;
  color: #fff;
  transition: all 0.3s ease-in;
}
.keypad > div.yellow {
  background: #e2cc68;
  color: #fff;
  transition: all 0.3s ease-in;
}
.keypad > div.grey {
  background: #a1a1a1;
  color: #fff;
  transition: all 0.3s ease-in;
}

.modal {
  background: rgba(255, 255, 255, 0.7);
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}
.modal div {
  max-width: 480px;
  background: #fff;
  padding: 40px;
  border-radius: 10px;
  margin: 10% auto;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
}
.modal .solution {
  color: #ff004c;
  font-weight: bold;
  font-size: 0.8em;
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* animations */
@keyframes flip {
  0% {
    transform: rotateX(0);
    /* set initial background and border colors, because they will change on animation. */
    background: #fff;
    border-color: #333;
  }
  45% {
    transform: rotateX(90deg);
    background: #fff;
    border-color: #333;
  }
  55% {
    transform: rotateX(90deg);
    /* passing in background and border-color variables established in color classes above. */
    background: var(--background);
    border-color: var(--border-color);
    /* set text color to white,  more aethetic on the now colored squares. */
    color: #eee;
  }
  100% {
    transform: rotateX(0);
    background: var(--background);
    border-color: var(--border-color);
    /* set text color to white,  more aethetic on the now colored squares. */
    color: #eee;
  }
}

@keyframes bounce {
  0% {
    /* starting point */
    transform: scale(1);
    border-color: #ddd;
  }
  50% {
    /* take size of square and multiply it by 1.2 */
    transform: scale(1.2);
  }
  100% {
    /* return to starting size */
    transform: scale(1);
    border-color: #333;
  }
}
